@page "/login"
@using Blazored.SessionStorage;
@using HiBlazor.SPA.Services;
@using HiBlazor.SPA.VmModels;
@layout LoginLayout
@inject ISyncSessionStorageService sessionStorage
@inject HttpClient Http
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject UserService UserService

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="false" AllowResetPassword="false" Username=@userName Password=@password
                     AllowRememberMe="false" RememberMe="@rememberMe"
                     Login=@(args => OnLogin(args, "Login with default values"))
                     ResetPassword=@(args => OnResetPassword(args, "Login with default values"))
                     Register=@(args => OnRegister("Login with default values")) />
    </RadzenTemplateForm>
</RadzenCard>


@code {
    string userName = "aydn";
    string password = "123456";
    bool rememberMe = true;


    void OnLogin(LoginArgs args, string name)
    {
        var loginVm = new AuthenticateRequest
            {
                Username = args.Username,
                Password = args.Password
            };

        var result = UserService.Authenticate(loginVm);

        if (result.IsSuccess)
        {
            sessionStorage.SetItem("token", result.Data.Token);
            NavigationManager.NavigateTo("/");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Giriş başarılı!" });
            return;
        }

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result.Message });
    }

    void OnRegister(string name)
    {
        // console.Log($"{name} -> Register");
    }

    void OnResetPassword(string value, string name)
    {
        // console.Log($"{name} -> ResetPassword for user: {value}");
    }
}
