@page "/login"
@using HiBlazor.Shared.VmModels;
@* @layout LoginLayout  *@
@inject HttpClient Http
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginWithDefaultValues")>
        <RadzenLogin AllowRegister="true" AllowResetPassword="false" Username=@userName Password=@password
                     AllowRememberMe="true" RememberMe="@rememberMe"
                     Login=@(args => OnLogin(args, "Login with default values"))
                     ResetPassword=@(args => OnResetPassword(args, "Login with default values"))
                     Register=@(args => OnRegister("Login with default values")) />
    </RadzenTemplateForm>
</RadzenCard>


@code {
    string userName = "aydn";
    string password = "123456";
    bool rememberMe = true;


    async void OnLogin(LoginArgs args, string name)
    {
        var loginVm = new AuthenticateRequest
            {
                Username = args.Username,
                Password = args.Password
            };

        var registerService = await Http.PostAsJsonAsync("users/authenticate", loginVm);
        if (registerService.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Giriş başarılı!" });
            return;
        }

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = registerService.Content.ToString() });
    }

    void OnRegister(string name)
    {
        // console.Log($"{name} -> Register");
    }

    void OnResetPassword(string value, string name)
    {
        // console.Log($"{name} -> ResetPassword for user: {value}");
    }
}
